name: Build Brunch using Github Actions
on:
  push:
    branches:
      - 'continuous-integration'
    paths-ignore:
      - 'README.md'
concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-kernels:
    name: Prepare Kernels
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.kernels.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          yes | DEBIAN_FRONTEND=noninteractive sudo apt update
          #yes | DEBIAN_FRONTEND=noninteractive sudo apt dist-upgrade
          yes | DEBIAN_FRONTEND=noninteractive sudo apt install gcc-12 g++-12 git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison sbsigntool dwarves
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 110 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
      - name: Checkout Brunch source code
        uses: actions/checkout@v4
      - name: Download kernels and apply patches
        run: ./prepare_kernels.sh
      - name: Define kernels matrix
        id: kernels
        run: echo "matrix=$(echo [\"$(ls -d ./kernels/*  | cut -f3 -d'/' | sed -Ez '$ s/\n+$//' | sed -z 's#\n#","#g')\"])" >> $GITHUB_OUTPUT
      - name: Compress kernels source files
        run: tar zcf /tmp/kernel.tar.gz kernel
      - name: Upload kernels source
        uses: actions/upload-artifact@v3
        with:
          name: kernels
          path: /tmp/kernel.tar.gz
          if-no-files-found: error
  build-firmware:
    name: Build firmware and package
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          yes | DEBIAN_FRONTEND=noninteractive sudo apt update
          #yes | DEBIAN_FRONTEND=noninteractive sudo apt dist-upgrade
          yes | DEBIAN_FRONTEND=noninteractive sudo apt install gcc-12 g++-12 git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison sbsigntool python3-protobuf rdfind zstd
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 110 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
      - name: Checkout Brunch source code
        uses: actions/checkout@v4
      - name: Build brunch
        run: sudo bash build_firmware.sh
      - name: Compress firmware files
        run: tar zcf /tmp/firmware.tar.gz firmware
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: firmware
          path: /tmp/firmware.tar.gz
          if-no-files-found: error
  release:
    name: Make a release
    permissions:
      contents: write
    needs: [build-firmware, build-kernels]
    runs-on: ubuntu-22.04
    steps:
      - name: Download built kernels
        uses: actions/download-artifact@v3
        with:
          name: kernels
      - name: Download built firmware
        uses: actions/download-artifact@v3
        with:
          name: firmware
      - name: go packaging
        run: |
          mkdir packages
          mv kernel.tar.gz packages
          mv firmware.tar.gz packages
          tar zcf packages.tar.gz packages
      - name: Identify custom version
        if: ${{ (github.repository != 'sebanc/brunch') && (github.repository != 'sebanc/brunch-unstable') }}
        run: echo "RELEASE_VERSION_TYPE=custom" >> $GITHUB_ENV
      - name: Identify unstable version
        if: ${{ (github.repository == 'sebanc/brunch-unstable') }}
        run: echo "RELEASE_VERSION_TYPE=unstable" >> $GITHUB_ENV
      - name: Identify stable version
        if: ${{ (github.repository == 'sebanc/brunch') }}
        run: echo "RELEASE_VERSION_TYPE=stable" >> $GITHUB_ENV
      - name: Generate release details
        run: |
          RELEASE_FILE=$(date '+%Y%m%d%H%M%S')
          RELEASE_VERSION=0
          RELEASE_DATE=${RELEASE_FILE}
          mv "packages.tar.gz" "${RELEASE_FILE}.tar.gz"
          echo "Brunch release renamed from brunch_${RELEASE_VERSION}_${RELEASE_DATE}.tar.gz to brunch_${RELEASE_VERSION}_${RELEASE_VERSION_TYPE}_${RELEASE_DATE}.tar.gz"
          echo "RELEASE_FILE=${RELEASE_FILE}.tar.gz" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_VERSION}-${RELEASE_VERSION_TYPE}-${RELEASE_DATE}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${RELEASE_VERSION} ${RELEASE_VERSION_TYPE} ${RELEASE_DATE}" >> $GITHUB_ENV
      - name: Create a release and upload artifacts as assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.RELEASE_FILE }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          tag: "${{ env.RELEASE_FILE }}"
          name: "${{ env.RELEASE_NAME }}"
          commit: "${{ github.ref_name }}"
          body: "${{ github.event.head_commit.message }}"
